{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Container/Container.module.css","components/Filter/Filter.module.css","store/contactSlice.js","store/index.js","components/Container/Container.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","store/contactsSelectors.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","BASE_URL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","dispatch","fetch","response","ok","Error","json","data","message","removeContact","id","method","console","log","deleteContact","addContact","contactNew","headers","body","JSON","stringify","addContactNew","setError","state","action","status","error","payload","setPending","contactSlice","createSlice","name","initialState","contacts","filter","reducers","changeFilter","extraReducers","pending","fulfilled","rejected","actions","configureStore","reducer","contactReducer","Container","title","children","className","s","container","ContactForm","useState","setName","phone","setPhone","useSelector","useDispatch","handleChange","e","target","value","reset","onSubmit","preventDefault","newContact","some","contact","includes","alert","contactForm","label","input","type","autoComplete","onChange","placeholder","pattern","required","submitButton","Filter","currentTarget","getContacts","getFilter","ContactList","useEffect","normalizedFilter","toLowerCase","visibleContacts","list","length","map","item","buttonDelete","onClick","color","size","App","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.d59c274a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2yCLy\",\"item\":\"ContactList_item__2NWKy\",\"buttonDelete\":\"ContactList_buttonDelete__xgf5_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2sdyM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1oWFN\"};","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst BASE_URL = 'https://618eb0d750e24d0017ce13d2.mockapi.io/api/contacts';\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchContacts',\n  async function (_, { rejectWithValue, dispatch }) {\n    try {\n      const response = await fetch(BASE_URL);\n      if (!response.ok) {\n        throw new Error('error server!');\n      }\n      const data = await response.json();\n\n      // dispatch(fetchContactsAll(data));\n\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  },\n);\n\nexport const removeContact = createAsyncThunk(\n  'contacts/remove',\n  async function (id, { rejectWithValue, dispatch }) {\n    try {\n      const response = await fetch(`${BASE_URL}/${id}`, {\n        method: 'DELETE',\n      });\n      console.log(' delete', response);\n      if (!response.ok) {\n        throw new Error(\"Can't delete contact!Error Server!\");\n      }\n      dispatch(deleteContact(id));\n      const data = await response.json();\n      console.log('delete data', data);\n      return id;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  },\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addcontact',\n  async function (contactNew, { rejectWithValue, dispatch }) {\n    try {\n      const response = await fetch(BASE_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(contactNew),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Can't add contact! Error Server!\");\n      }\n      // dispatch(addContact(data));\n      const data = await response.json();\n      // const data = await addContact(contactNew).then(res => res.json());\n      // console.log('add data', data)// получила новый контакт\n      dispatch(addContactNew(data));\n      // return [data, ...state.contacts];\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  },\n);\n\n// export const filterContact = createAsyncThunk(\n//     'contacts/filter',\n//     async function (value, { rejectWithValue, dispatch }) {\n//         try {\n//             const response = await fetch(`https://618eb0d750e24d0017ce13d2.mockapi.io/api/contacts?filter=${value}`, {\n//              metod:'GET',\n//             })\n//             // console.log(response)\n//          if (!response.ok) {\n//             throw new Error(\"Can't delete contact!Error Server!\");\n//          }\n//             dispatch(deleteContact({id}));\n\n//         } catch (error) {\n//              return rejectWithValue(error.message)\n//         }\n//     }\n// );\n\nconst setError = (state, action) => {\n  state.status = 'rejected';\n  state.error = action.payload;\n};\nconst setPending = state => {\n  // state.status = 'loading';\n  state.error = null;\n};\n\nconst contactSlice = createSlice({\n  name: 'contacts',\n  initialState: {\n    contacts: [],\n    filter: '',\n    status: null,\n    error: null,\n  },\n\n  reducers: {\n    addContactNew(state, action) {\n      console.log('reduser action.payload', action.payload);\n      console.log('reduser addContact  state.contacts', state.contacts);\n      state.contacts = [action.payload, ...state.contacts];\n      // state.contacts.push(action.payload);\n      // state.contacts = action.payload;\n      console.log('reduser addContact  state.contacts', state.contacts);\n      // console.log('reduser push',  [action.payload, ...state.contacts]);\n      //   state.contacts.concat(action.payload);\n\n      //           state.contacts = [action.payload, ...state.contacts];\n    },\n\n    deleteContact(state, action) {\n      state.contacts = state.contacts.filter(({ id }) => id !== action.payload);\n      console.log('reduser a deleteContac state.contacts', state.contacts);\n    },\n\n    changeFilter(state, action) {\n      state.filter = action.payload;\n    },\n  },\n\n  extraReducers: {\n    [fetchContacts.pending]: setPending,\n    [fetchContacts.fulfilled]: (state, action) => {\n      state.status = 'resolved';\n      // console.log('super fetchContacts action.payload', action.payload)\n      // console.log('super fetchContacts state.contacts', state.contacts)\n      state.contacts = action.payload;\n      console.log('super fetchContacts state.contacts - 1 ', state.contacts);\n      // console.log('super fetchContacts state ', state)\n      // state.error = null;\n      //   return {\n      //   ...state,\n      //     contacts: action.payload\n      // }\n    },\n\n    [fetchContacts.rejected]: setError,\n\n    [addContact.pending]: setPending,\n    [addContact.fulfilled]: function (state, action) {\n      state.status = 'resolved';\n\n      console.log('super action.payload', action.payload);\n      // console.log('super state.contacts', state.contacts);\n      // state.contacts = action.payload;\n      //  state.contacts = state.contacts.push(action.payload);\n      // state.contacts = [...state.contacts, action.payload];\n      console.log('super state.contacts-add', state.contacts);\n\n      state.error = null;\n      //  return {\n      //   ...state,\n      //   contacts:[...state.contacts, ...action.payload]\n      // }\n    },\n    [addContact.rejected]: setError,\n\n    [removeContact.pending]: setPending,\n    [removeContact.fulfilled]: state => {\n      state.status = 'resolved';\n      state.error = null;\n    },\n    [removeContact.rejected]: setError,\n  },\n\n  // extraReducers: (builder) => {\n  //   builder\n  //     .addCase(fetchContacts.pending, (state, action) => {\n  //     state.status = 'loading';\n  //     state.error = null;\n  //     })\n  //   .addCase(fetchContacts.fulfilled, (state, action) => {\n  //      state.status = 'resolved';\n  //     console.log('super fetchContacts action.payload', action.payload)\n  //     console.log('super fetchContacts state.contacts', state.contacts)\n  //     // state.contacts.push(action.payload);\n  //     state.contacts = action.payload;\n  //     console.log('super fetchContacts state.contacts - 1 ', state.contacts)\n  //     state.error = null;\n  //   })\n  //    .addCase(fetchContacts.rejected, (state,action)=>{\n  //       state.status = 'rejected';\n  // state.error = action.payload;\n  //    })\n\n  //         .addCase(addContact.pending, (state, action) => {\n  //     state.status = 'loading';\n  //     state.error = null;\n  //     })\n  //   .addCase(addContact.fulfilled, (state, action) => {\n  //      state.status = 'resolved';\n  //     console.log('super addContacts action.payload', action.payload)\n  //     console.log('super dddContacts state.contacts', state.contacts)\n  //     // state.contacts = action.payload;\n  //      state.contacts.push(action.payload);\n  //     console.log('super fetchContacts state.contacts - 1 ', state.contacts)\n  //     state.error = null;\n  //   })\n  //    .addCase(addContact.rejected, (state,action)=>{\n  //       state.status = 'rejected';\n  // state.error = action.payload;\n  //    })\n\n  //     .addCase(removeContact.pending, (state, action) => {\n  //     state.status = 'loading';\n  //     state.error = null;\n  //     })\n  //   .addCase(removeContact.fulfilled, (state, action) => {\n  //     state.status = 'resolved';\n  //       state.error = null;\n  //   })\n  //    .addCase(removeContact.rejected, (state,action)=>{\n  //       state.status = 'rejected';\n  // state.error = action.payload;\n  //    })\n  // }\n});\n\nexport const {\n  // fetchContactsAll,\n  addContactNew,\n  deleteContact,\n  changeFilter,\n} = contactSlice.actions;\nexport default contactSlice.reducer;\n// ==============================================================\n// import { createSlice } from '@reduxjs/toolkit';\n// import shortid from 'shortid';\n\n// import contactsJson from '../contacts.json';\n\n// const initialStateContacts =\n//   JSON.parse(localStorage.getItem('contacts')) ?? contactsJson;\n\n// const contactSlice = createSlice({\n//   name: 'contacts',\n//   initialState: {\n//     contacts: initialStateContacts,\n//     filter: '',\n//   },\n\n//   reducers: {\n//     fetchContacts(state, action) {},\n\n//     addContact(state, action) {\n//       // console.log('state ADD', state.contacts)\n//       console.log('action ADD', action.payload);\n//       const contact = {\n//         name: action.payload.name,\n//         number: action.payload.number,\n//         completed: false,\n//         id: shortid.generate(),\n//       };\n//       state.contacts = [contact, ...state.contacts];\n//     },\n\n//     deleteContact(state, action) {\n//       // console.log('state DELL',contacts)\n//       console.log('action DELL', action.payload);\n//       //  console.log('action22')\n//       state.contacts = state.contacts.filter(({ id }) => id !== action.payload);\n//     },\n\n//     changeFilter(state, action) {\n//       //  console.log('actionCHAnGE', action.payload)\n//       //   console.log('filter CHAnGE', state.filter, state.contacts)\n//       state.filter = action.payload;\n//       // const normalizedFilter = state.filter.toLowerCase();\n//       // state.contacts = state.contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n//     },\n\n//     // filterContact(state, action) {\n//     //      state.filter = action.payload\n//     //     // const normalizedFilter = state.filter.toLowerCase();\n//     //     // state.contacts = state.contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n//     // },\n//   },\n// });\n\n// // const normalizedFilter = filter.toLowerCase();\n// //   return contacts.filter(contact =>\n// //     contact.name.toLowerCase().includes(normalizedFilter),\n// // const phoneBookReducer = combineReducers({\n// //   contacts: contactsReducer,\n// //   filter: filterReducer,\n// // });\n// // const filterReducer = createReducer('', {\n// //   [actions.changeFilter]: (_, { payload }) => payload,\n// // });\n\n// // const phoneBookReducer = combineReducers({\n// //   contacts: contactsReducer,\n// //   filter: filterReducer,\n// // });\n// export const { fetchContacts, addContact, deleteContact, changeFilter } =\n//   contactSlice.actions;\n// export default contactSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport contactReducer from './contactSlice';\n\nexport default configureStore({\n  reducer: {\n    contacts: contactReducer,\n    // filter: filterReducer,\n  },\n});\n// import {\n//   persistStore,\n//   persistReducer,\n//   FLUSH,\n//   REHYDRATE,\n//   PAUSE,\n//   PERSIST,\n//   PURGE,\n//   REGISTER,\n// } from 'redux-persist';\n// import storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\n// import phoneBookReducer from './phonebook/phonebook-reducers';\n\n// console.log(process.env.NODE_ENV);//development OR PRODUCTION\n// const middleware = [\n// ...getDefaultMiddleware({\n//   serializableCheck: {\n//     ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n//   },\n// }),\n//   logger,\n// ];\n\n// const persistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\n// const store = configureStore({\n//   reducer: {\n//     phoneBook:  phoneBookReducer,\n// phoneBook: persistReducer(persistConfig, phoneBookReducer),\n//   },\n//   middleware: middleware,\n// devTools: process.env.NODE_ENV === 'development',\n// });\n// const persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\n// export default { store};\n","import PropTypes from 'prop-types';\nimport s from '../Container/Container.module.css';\n\nfunction Container({ title, children }) {\n  return (\n    <div className={s.container}>\n      <h2> {title}</h2>\n\n      {children}\n    </div>\n  );\n}\n\nContainer.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import { useState } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../store/contactSlice';\n\nimport s from '../ContactForm/ContactForm.module.css';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  const dispatch = useDispatch();\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      default:\n        return;\n    }\n  }\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = {\n      name: name,\n      phone: phone,\n    };\n\n    if (contacts) {\n      if (contacts.some(contact => contact.name.includes(name))) {\n        alert(`${name} is already in contacts!`);\n        reset();\n        return;\n      }\n    }\n\n    dispatch(addContact(newContact));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.contactForm}>\n      <label className={s.label}>\n        Name:\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          autoComplete=\"off\"\n          value={name}\n          onChange={handleChange}\n          placeholder=\"Tom Smit\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label className={s.label}>\n        Phone:\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"phone\"\n          autoComplete=\"off\"\n          value={phone}\n          onChange={handleChange}\n          placeholder=\"050-50-50\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <input className={s.submitButton} type=\"submit\" value=\"Add contact\" />\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\n// import { useDispatch } from 'react-redux';\nimport { changeFilter } from '../../store/contactSlice';\n\n// import PropTypes from 'prop-types';\nimport s from '../Filter/Filter.module.css';\n\n// import { connect } from 'react-redux';\n// import * as actions from '../../redux/phonebook/phonebook-action';\n\nconst Filter = () =>\n  // { value\n  // , onChange\n  // }\n  {\n    const dispatch = useDispatch();\n    // const filter = useSelector(state => state.contacts.filter);\n    const filter = useSelector(state => state.contacts.filter);\n\n    // console.log(value)\n    return (\n      <label>\n        Find contact by name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"filter\"\n          autoComplete=\"off\"\n          // value={value}\n          value={filter}\n          // onChange={onChange}\n          // onChange = {changeFilter}\n          onChange={e => dispatch(changeFilter(e.currentTarget.value))}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n    );\n  };\n\n// Filter.propTypes = {\n//   value: PropTypes.string,\n//   onChange: PropTypes.func,\n// };\n\n// const mapStateToProps = state => ({\n//   // value: state.phoneBook.filter,\n//   value: state.contacts.filter,\n\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(actions.changeFilter(e.currentTarget.value)),\n// });\n\nexport default Filter;\n// connect(mapStateToProps, mapDispatchToProps)(Filter);\n","export const getContacts = state => state.contacts.contacts;\nexport const getFilter = state => state.contacts.filter;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  fetchContacts,\n  removeContact,\n  // addContact,\n} from '../../store/contactSlice';\n\nimport { getContacts, getFilter } from '../../store/contactsSelectors';\n\nimport s from '../ContactList/ContactList.module.css';\nimport { TiUserDeleteOutline } from 'react-icons/ti';\n\nfunction ContactList() {\n  // const contacts = useSelector(state => state.contacts.contacts);\n  // const filter = useSelector(state => state.contacts.filter);\n  const { status, error } = useSelector(state => state.contacts);\n\n  const dispatch = useDispatch();\n  // console.log('list contacts', contacts);\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  // console.log('list getContacts', contactsGet);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const normalizedFilter = filter.toLowerCase();\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n  // console.log('visibleContacts', visibleContacts);\n  // const visibleContacts = contacts;\n  console.log('list contacts', visibleContacts);\n\n  return (\n    <div>\n      {status === 'loading' && <h2>Loading</h2>}\n      {status === 'rejected' && <h2>Ups..{error}</h2>}\n      {/* {contacts.length > 0 &&( */}\n      <ul className={s.list}>\n        {/* {contacts && */}\n        {/* {status === 'resolved' && */}\n\n        {/* visibleContacts.map(contact => ( */}\n        {contacts.length > 0 &&\n          // contacts.map(contact => (\n          visibleContacts.map(contact => (\n            <li className={s.item} key={contact.id}>\n              <p>\n                <span>{contact.name}:</span> <span>{contact.phone}</span>\n              </p>\n\n              <button\n                className={s.buttonDelete}\n                type=\"button\"\n                // onClick={onDeleteContact(contact.id)}\n                onClick={() => dispatch(removeContact(contact.id))}\n              >\n                <TiUserDeleteOutline color=\"red\" size=\"18px\" />\n              </button>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ContactList;\n\n// ========================================================\n// import { useSelector } from 'react-redux';\n\n// import { useDispatch } from 'react-redux';\n// import { deleteContact } from '../../store/contactSlice';\n\n// // import PropTypes from 'prop-types';\n// import s from '../ContactList/ContactList.module.css';\n// import { TiUserDeleteOutline } from 'react-icons/ti';\n\n// import { connect } from 'react-redux';\n// // import * as actions from '../../redux/phonebook/phonebook-action';\n\n// // function ContactList({ onDeleteContact, filter }) {\n// function ContactList() {\n//   const contacts = useSelector(state => state.contacts.contacts);\n//   const filter = useSelector(state => state.contacts.filter);\n//   console.log('list filter', filter);\n//   console.log('list contacts', contacts);\n\n//   // const visibleContacts = (contacts, filter) => {\n//   // const normalizedFilter = filter.toLowerCase().trim();\n\n//   // return contacts.filter(\n//   //   contact =>\n//   //     contact.name.toLowerCase().includes(normalizedFilter),\n//   // );\n//   // };\n\n//   const normalizedFilter = filter.toLowerCase();\n//   const visibleContacts = contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n//   console.log('visibleContacts', visibleContacts);\n\n//   const dispatch = useDispatch();\n//   // const onDeleteContact= (id) => dispatch(deleteContact(id))\n\n//   return (\n//     <div>\n//       <ul className={s.list}>\n//         {/* {contacts && */}\n//         {visibleContacts.map(contact => (\n//           <li className={s.item} key={contact.id}>\n//             <p>\n//               <span>{contact.name}:</span> <span>{contact.number}</span>\n//             </p>\n\n//             <button\n//               className={s.buttonDelete}\n//               type=\"button\"\n//               // onClick={onDeleteContact(contact.id)}\n//               onClick={() => dispatch(deleteContact(contact.id))}\n//             >\n//               <TiUserDeleteOutline color=\"red\" size=\"18px\" />\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// // ContactList.propTypes = {\n// //   contacts: PropTypes.array.isRequired,\n// //   onDeleteContact: PropTypes.func,\n// // };\n// const getVisibleContacts = ({ contacts, filter }) => {\n//   // const normalizedFilter = filter.toLowerCase();\n//   // return contacts.filter(contact =>\n//   //   contact.name.toLowerCase().includes(normalizedFilter),\n//   // );\n//   return contacts;\n// };\n\n// // const getVisibleContacts = (allContacts, filter) => {\n// //   const normalizedFilter = filter.toLowerCase();\n// //   return allContacts.filter(contact =>\n// //     contact.name.toLowerCase().includes(normalizedFilter),\n// //   );\n// // };\n// // const mapStateToProps = ({ phoneBook: { contacts, filter } }) => ({\n// const mapStateToProps = ({ contacts: { contacts, filter } }) => ({\n//   contacts: getVisibleContacts(contacts, filter),\n// });\n\n// // const mapStateToProps = state => {\n// //   const { filter, contacts } = state.contacts;\n// //   const normalizedFilter = filter.toLowerCase();\n// //   const visibleContacts =  contacts.filter(contact =>\n// //       contact.name.toLowerCase().includes(normalizedFilter),\n// //   );\n\n// //   return {\n// //     contacts: visibleContacts,\n// //   }\n// // };\n\n// const mapDispatchToProps = dispatch => ({\n//   // onDeleteContact: id => dispatch(actions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n// // export default ContactList;\n","import './App.css';\n\nimport Container from './components/Container/Container';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n\n      <Container>\n        <ContactForm />\n      </Container>\n\n      <Container title=\"Contacts\">\n        <Filter />\n        <ContactList />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__HYNUh\",\"label\":\"ContactForm_label__2AZih\",\"input\":\"ContactForm_input__3DGDV\",\"submitButton\":\"ContactForm_submitButton__uDTyZ\"};"],"sourceRoot":""}